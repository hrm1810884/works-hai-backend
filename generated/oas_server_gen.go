// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AiDrawingGet implements GET /ai-drawing operation.
	//
	// Retrieve surrounding drawings only for dev mode.
	//
	// GET /ai-drawing
	AiDrawingGet(ctx context.Context) (AiDrawingGetRes, error)
	// HumanDrawingPost implements POST /human-drawing operation.
	//
	// Upload human drawing using the presigned URL obtained from /upload-url.
	//
	// POST /human-drawing
	HumanDrawingPost(ctx context.Context, req *HumanDrawingPostReq) (HumanDrawingPostRes, error)
	// SavedURLPost implements POST /saved-url operation.
	//
	// Save drawing URL in storage to BE.
	//
	// POST /saved-url
	SavedURLPost(ctx context.Context, req *SavedURLPostReq) (SavedURLPostRes, error)
	// UploadURLGet implements GET /upload-url operation.
	//
	// Retrieve presigned URLs for downloading surrounding drawings from cloud storage.
	//
	// GET /upload-url
	UploadURLGet(ctx context.Context) (UploadURLGetRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
